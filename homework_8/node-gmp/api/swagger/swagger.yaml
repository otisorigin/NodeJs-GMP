swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: NodeJS-GMP API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: auth
  description: authentication in application
- name: users
  description: Users in application
- name: groups
  description: Groups in application
  
securityDefinitions:
   APIKeyHeader:
     type: apiKey
     in: header
     name: x-access-token

paths:
  /auth:
    post:
      tags:
        - auth
      summary: authenticate user
      operationId: authUser
      description: |
        Authentication for user.
      parameters:
      - in: body
        name: User
        description: User item to add
        schema:
          properties:
            login:
              type: string
              example: SUPER_USER_229
              description: User's login
            password:
              type: string
              example: psadhjhkhhjA2
              description: User's password
      responses:
        200:
          description: search results matching criteria
          schema:
            properties:
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NjUsImFnZSI6NCwiaWF0IjoxNTg0OTExNDEwLCJleHAiOjE1ODQ5MTE0NDB9.Rlu72YLExhyGlOi50sY3Qvmmwifv5s5QQbLpxyqUdF0
                description: Authenticate token
        401:
          description: Incorrect login or password
  /users:
    get:
      security:
        - APIKeyHeader: []
      tags:
      - users
      summary: find all users
      operationId: findAllUsers
      description: |
        Find all users in system.
      produces:
      - application/json
      parameters:
      - in: query
        name: loginSubstring
        description: substring in login
        required: true
        type: string
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        required: true
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: bad input parameter
        401:
          description: Access token is missing or invalid
    post:
      security:
        - APIKeyHeader: []
      tags:
      - users
      summary: adds a new user
      operationId: addUser
      description: |
        Adds new user to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        description: User item to add
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
        401:
          description: Access token is missing or invalid
    put:
      security:
        - APIKeyHeader: []
      tags:
      - users
      summary: update user
      operationId: updateUser
      description: Update user in the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        description: User item to add
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
  /users/{id}:
    get:
      security:
        - APIKeyHeader: []
      tags:
      - users
      summary: find user by id
      operationId: findUserById
      description: Find user in the system
      produces:
      - application/json
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          type: integer
          minimum: 1
          description: The user ID
      responses:
        200:
          description: search result
          schema:
              $ref: '#/definitions/User'
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
    delete:
      security:
        - APIKeyHeader: []
      tags:
      - users
      summary: remove user by id
      operationId: removeUserById
      description: Remove user in system
      produces:
      - application/json
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          type: integer
          minimum: 1
          description: The user ID
      responses:
        200:
          description: user removed
          schema:
              $ref: '#/definitions/User'
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
  /users/{id}/groups:
    get:
      security:
        - APIKeyHeader: []
      tags:
      - users
      summary: get all groups of user with id
      operationId: findUserGroups
      description: Find all user groups
      produces:
      - application/json
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          type: integer
          minimum: 1
          description: The user ID
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
  /groups:
    get:
      security:
        - APIKeyHeader: []
      tags:
      - groups
      summary: find all groups
      operationId: findAllGroups
      description: |
        Find all groups in system.
      produces:
      - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        400:
          description: bad input parameter
        401:
          description: Access token is missing or invalid
    post:
      security:
        - APIKeyHeader: []
      tags:
      - groups
      summary: adds a new group
      operationId: addGroup
      description: |
        Adds new group to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Group
        description: Group item to add
        schema:
          $ref: '#/definitions/Group'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
        401:
          description: Access token is missing or invalid
    put:
      security:
        - APIKeyHeader: []
      tags:
      - groups
      summary: update Group
      operationId: updateGroup
      description: Update group in the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Group
        description: Group item to add
        schema:
          $ref: '#/definitions/Group'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
  /groups/{id}:
    get:
      security:
        - APIKeyHeader: []
      tags:
      - groups
      summary: find group by id
      operationId: findGroupById
      description: Find group in the system
      produces:
      - application/json
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          type: integer
          minimum: 1
          description: The group ID
      responses:
        200:
          description: search result
          schema:
              $ref: '#/definitions/Group'
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
    delete:
      security:
        - APIKeyHeader: []
      tags:
      - groups
      summary: remove group by id
      operationId: removeGroupById
      description: Remove group in system
      produces:
      - application/json
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          type: integer
          minimum: 1
          description: The group ID
      responses:
        200:
          description: group removed
          schema:
              $ref: '#/definitions/Group'
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
  /groups/{id}/users:
    get:
      security:
        - APIKeyHeader: []
      tags:
      - groups
      summary: get all users of group with id
      operationId: findGroupUsers
      description: Find all groups of user
      produces:
      - application/json
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          type: integer
          minimum: 1
          description: The group ID
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
    post:
      security:
        - APIKeyHeader: []
      tags:
      - groups
      summary: adds users to a group
      operationId: addUsersToGroup
      description: |
        Adds list of users to group
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          type: integer
          minimum: 1
          description: The group ID
        - in: body
          name: users
          description: users ids to add to group
          schema:
            properties:
              users:
                type: array
                items:
                  type: number
                  example: 1
                example: [1, 2]
      responses:
        201:
          description: item added
        400:
          description: invalid input, object invalid
        401:
          description: Access token is missing or invalid
definitions:
  User:
    required:
    - id
    - login
    - password
    - age
    properties:
      id:
        type: number
        example: 15
      login:
        type: string
        example: Super_User
      password:
        type: string
        pattern: /^(?=.*?[A-Za-z])(?=.*?[0-9]).*$/
        example: padsadsadA2
      age:
        type: number
        example: 15
  Group:
    required:
    - id
    - name
    - permissions
    properties:
      id:
        type: number
        example: 1
      name:
        type: string
        example: TEST_GROUP
      permissions:
        type: array
        items:
          type: string
          example: READ
        example: [READ, WRITE]
# host: 127.0.0.1
# basePath: /api
schemes:
 - https
 - http
# Added by API Auto Mocking Plugin
# host: 127.0.0.1:3000
# basePath: /api
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /otisorigin/Node-GMP/1.0.0